<refentry id="VisualOS-Procesor-Interface">
<refmeta>
<refentrytitle>Procesor Interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>VISUALOS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Procesor Interface</refname><refpurpose>CPU interface to the other subsystems.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



<link linkend="void">void</link>        <link linkend="cpu-register-proc-creat">cpu_register_proc_creat</link>         (<link linkend="proc-creat-callback-t">proc_creat_callback_t</link> func);
<link linkend="void">void</link>        <link linkend="cpu-register-proc-finish">cpu_register_proc_finish</link>        (<link linkend="proc-finish-callback-t">proc_finish_callback_t</link> func);
<link linkend="void">void</link>        (<link linkend="proc-creat-callback-t">*proc_creat_callback_t</link>)        (<link linkend="gint">gint</link> pid);
<link linkend="void">void</link>        (<link linkend="proc-finish-callback-t">*proc_finish_callback_t</link>)       (<link linkend="gint">gint</link> pid);
<link linkend="void">void</link>        <link linkend="CPU-terminate-proc">CPU_terminate_proc</link>              (<link linkend="gint">gint</link> pid);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>
This functions allow the other subsystems to interact, througth the messaging
service, with the CPU.

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="cpu-register-proc-creat">cpu_register_proc_creat ()</title>
<indexterm><primary>cpu_register_proc_creat</primary></indexterm><programlisting><link linkend="void">void</link>        cpu_register_proc_creat         (<link linkend="proc-creat-callback-t">proc_creat_callback_t</link> func);</programlisting>
<para>
Registers <parameter>func</parameter> to be called when ever a new process gets created.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> function to be called.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cpu-register-proc-finish">cpu_register_proc_finish ()</title>
<indexterm><primary>cpu_register_proc_finish</primary></indexterm><programlisting><link linkend="void">void</link>        cpu_register_proc_finish        (<link linkend="proc-finish-callback-t">proc_finish_callback_t</link> func);</programlisting>
<para>
Registers <parameter>func</parameter> to be called when ever a process is terminated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> function to be called.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="proc-creat-callback-t">proc_creat_callback_t ()</title>
<indexterm><primary>proc_creat_callback_t</primary></indexterm><programlisting><link linkend="void">void</link>        (*proc_creat_callback_t)        (<link linkend="gint">gint</link> pid);</programlisting>
<para>
Function pointer type for the callback used on <parameter>cpu_register_proc_creat</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>pid</parameter>&nbsp;:</term>
<listitem><simpara>Process ID of the created process.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="proc-finish-callback-t">proc_finish_callback_t ()</title>
<indexterm><primary>proc_finish_callback_t</primary></indexterm><programlisting><link linkend="void">void</link>        (*proc_finish_callback_t)       (<link linkend="gint">gint</link> pid);</programlisting>
<para>
Function pointer type for the callback used on <parameter>cpu_register_proc_finish</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>pid</parameter>&nbsp;:</term>
<listitem><simpara>Process ID of the terminated process.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="CPU-terminate-proc">CPU_terminate_proc ()</title>
<indexterm><primary>CPU_terminate_proc</primary></indexterm><programlisting><link linkend="void">void</link>        CPU_terminate_proc              (<link linkend="gint">gint</link> pid);</programlisting>
<para>
Terminate process <parameter>pid</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pid</parameter>&nbsp;:</term>
<listitem><simpara> Process to terminates.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
