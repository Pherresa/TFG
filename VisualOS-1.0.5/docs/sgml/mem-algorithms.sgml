<refentry id="VisualOS-Memory-Algorithms">
<refmeta>
<refentrytitle>Memory Algorithms</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>VISUALOS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Memory Algorithms</refname><refpurpose>Interface for Algorithms.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



struct      <link linkend="mem-algorithm-t">mem_algorithm_t</link>;
<link linkend="mem-algorithm-t">mem_algorithm_t</link>* <link linkend="get-MEM-current-algorithm">get_MEM_current_algorithm</link>  (void);
<link linkend="GSList">GSList</link>*     <link linkend="init-MEM-algorithms">init_MEM_algorithms</link>             (void);
<link linkend="void">void</link>        <link linkend="register-MEM-algorithm">register_MEM_algorithm</link>          (<link linkend="mem-algorithm-t">mem_algorithm_t</link> *algorithm);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>
Great effort has been devoted to making the addicion of new algorithms as easy
as posible, here is documented what there is to know to be able to write your
own algorithms.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="mem-algorithm-t">struct mem_algorithm_t</title>
<indexterm><primary>mem_algorithm_t</primary></indexterm><programlisting>struct mem_algorithm_t {
					/* This struct is all
							   that we know about
							   each algorithm */
	gchar * name;
	void (*select) (void);
	void (*unselect) (void);			/* These two functions
							   will be called before
							   and after the use of
							   an algorithm to let
							   it keep a low memory
							   usage when not in
							   use.*/
	GtkWidget * properties;				/* Each algorithm will
							   maintain it's own
							   properties widget.
							   NULL means "no
							   properties".  It
							   should be set to NULL
							   when destroyed. If
							   not destroyed in
							   "unselect" the system
							   will destroy it.*/
	void (*page_access) (gint pid, gint page);	/* lets the algorithm
							   keep track of page
							   accesses */
	gint (*select_frame) (void);			/* it should return a
							   frame to be assigned
							   when out of memory */
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="get-MEM-current-algorithm">get_MEM_current_algorithm ()</title>
<indexterm><primary>get_MEM_current_algorithm</primary></indexterm><programlisting><link linkend="mem-algorithm-t">mem_algorithm_t</link>* get_MEM_current_algorithm  (void);</programlisting>
<para>
Find out which is the current algorithm.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the struct which descrives the current algorithm.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="init-MEM-algorithms">init_MEM_algorithms ()</title>
<indexterm><primary>init_MEM_algorithms</primary></indexterm><programlisting><link linkend="GSList">GSList</link>*     init_MEM_algorithms             (void);</programlisting>
<para>
Initializes the MEM algorithms code.
</para>
<para>
Mainly will call init functions for each algorithm.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a pointer to the algorithm structs linked list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="register-MEM-algorithm">register_MEM_algorithm ()</title>
<indexterm><primary>register_MEM_algorithm</primary></indexterm><programlisting><link linkend="void">void</link>        register_MEM_algorithm          (<link linkend="mem-algorithm-t">mem_algorithm_t</link> *algorithm);</programlisting>
<para>
Each algorithm should call this function in it's initialization function
to register its algorithm struct.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&nbsp;:</term>
<listitem><simpara> algorithm struct to register.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
